<?xml version="1.0" encoding="UTF-8" ?>
<project name="Greencko" default="help">
  <target name="help" description="Phing target list">
    <exec executable="${phing.bin}"
          passthru="true">
      <arg value="-l"/>
    </exec>
  </target>

  <!-- Finds Composer, NPM, and rsync. -->
  <target name="env">
    <if>
      <not>
        <available file="${drush.bin}" property="drush.exists"/>
      </not>
      <then>
        <exec command="which drush" outputProperty="drush"/>
      </then>
    </if>
    <if>
      <not>
        <available file="${drupal.bin}" property="drupal.exists"/>
      </not>
      <then>
        <exec command="which drupal" outputProperty="drupal"/>
      </then>
    </if>
    <exec command="which composer" outputProperty="composer"/>
    <exec command="which npm" outputProperty="npm"/>
    <exec command="which rsync" outputProperty="rsync"/>

    <echo message="Found Drush: ${drush.bin}"/>
    <echo message="Found DrupalConsole: ${drupal.bin}"/>
    <echo message="Found Composer: ${composer.bin}"/>
    <echo message="Found NPM: ${npm.bin}"/>
    <echo message="Found rsync: ${rsync.bin}"/>
    <echo message="Environment file:"/>
    <echo message="MYSQL_DATABASE=${env.MYSQL_DATABASE}"/>
    <echo message="MYSQL_PORT=${env.MYSQL_PORT}"/>
    <echo message="MYSQL_HOSTNAME=${env.MYSQL_HOSTNAME}"/>
    <echo message="MYSQL_USER=${env.MYSQL_USER}"/>
    <echo message="MYSQL_PASSWORD=${env.MYSQL_PASSWORD}"/>
    <echo message="DRUSH_OPTIONS_URI=${env.DRUSH_OPTIONS_URI}"/>
  </target>

  <taskdef name="drush" classname="\Phing\Drush\Task"/>
  <taskdef name="behat" classname="\Phing\Behat\Task"/>
  <taskdef name="phpcodesnifferconfiguration"
           classname="\Greencko\Phing\PhpCodeSnifferConfigurationTask"/>
  <taskdef name="phpunitconfiguration"
           classname="\Greencko\Phing\PhpUnitConfigurationTask"/>
  <taskdef name="setmysqlautoincrement"
           classname="\Greencko\Phing\SetMysqlAutoincrement"/>
  <taskdef name="truncatecachetables"
           classname="\Greencko\Phing\TruncateCacheTablesTask"/>
  <taskdef name="emptymysqldatabase"
           classname="\Greencko\Phing\MySqlEmptyDatabaseTask"/>


  <!-- #### MYSQL ### -->
  <!-- Drop all tables from Database -->
  <target name="mysql-drop-tables">
    <echo message="${drupal.db.dsn}"/>
    <echo message="Drop all MySQL tables from the database."/>
    <emptymysqldatabase
      url="${drupal.db.dsn}"
      userId="${drupal.db.user}"
      password="${drupal.db.password}"/>
  </target>

  <!-- #### DRUPAL ### -->
  <!-- Make the settings folder writeable so that the installer can copy settings.php. -->
  <target name="drupal-settings-folder-writable">
    <chmod mode="0755" failonerror="true" verbose="true" quiet="false"
           file="${site.settings.dir}"/>
  </target>
  <!-- Make settings.php writeable so that the installer can write to it. -->
  <target name="drupal-settings-php-writable"
          depends="drupal-settings-php-create">
    <if>
      <available file="${site.settings.php}" type="file"
                 property="site.settings.php.available"/>
      <then>
        <chmod mode="0644" failonerror="false" verbose="true" quiet="false"
               file="${site.settings.php}"/>
      </then>
    </if>
  </target>
  <!-- Make services.yml writeable. -->
  <target name="drupal-services-yml-writable"
          depends="drupal-services-yml-create">
    <if>
      <available file="${site.services.yml}" type="file"
                 property="site.services.yml.available"/>
      <then>
        <chmod mode="0644" failonerror="false" verbose="true" quiet="false"
               file="${site.services.yml}"/>
      </then>
    </if>
  </target>
  <!-- Create settings.php. -->
  <target name="drupal-settings-php-create"
          depends="drupal-settings-folder-writable">
    <if>
      <not>
        <available file="${site.settings.php}" type="file"
                   property="site.settings.php.available"/>
      </not>
      <then>
        <copy file="${site.settings.php.default}"
              tofile="${site.settings.php}"/>
      </then>
    </if>
  </target>
  <!-- Create services.yml. -->
  <target name="drupal-services-yml-create"
          depends="drupal-settings-folder-writable">
    <if>
      <not>
        <available file="${site.services.yml}" type="file"
                   property="site.services.yml.available"/>
      </not>
      <then>
        <copy file="${site.services.yml.default}"
              tofile="${site.services.yml}"/>
      </then>
    </if>
  </target>
  <!-- Truncating cache tables -->
  <target name="drupal-cache-tables-truncate">
    <echo message="Truncating cache tables."/>
    <truncatecachetables
      url="${drupal.db.dsn}"
      userId="${drupal.db.user}"
      password="${drupal.db.password}"/>
  </target>
  <!-- Destroys the Drupal installation, but leaves the code base intact. -->
  <target name="drupal-uninstall">
    <if>
      <available file="${site.settings.dir}"
                 property="site.settings.dir.exists"/>
      <then>
        <chmod file="${site.settings.dir}" mode="0755"/>
        <delete failonerror="true" includeemptydirs="true">
          <fileset dir="${site.settings.dir}">
            <include name="settings.php"/>
            <include name="services.yml"/>
          </fileset>
        </delete>
      </then>
    </if>
    <if>
      <available file="${site.settings.dir}/files"
                 property="site.settings.dir.exists"/>
      <then>
        <chmod mode="0777">
          <fileset dir="${site.settings.dir}/files" defaultexcludes="false">
            <include name="**/.htaccess"/>
            <include name="**/*.php"/>
          </fileset>
        </chmod>
        <delete failonerror="true" includeemptydirs="true">
          <fileset dir="${site.settings.dir}/files">
            <include name="files/**"/>
          </fileset>
        </delete>
      </then>
    </if>

    <if>
      <available file="${site.private_files.dir}"
                 property="site.private_files.dir.exists"/>
      <then>
        <chmod file="${site.private_files.dir}" mode="0755"/>
        <delete failonerror="true" includeemptydirs="true">
          <fileset dir="${site.private_files.dir}">
            <include name="**"/>
            <exclude name=".gitkeep"/>
            <exclude name=".htaccess"/>
          </fileset>
        </delete>
      </then>
    </if>
    <phingcall target="mysql-drop-tables"/>
  </target>
  <!-- Resets the Drupal installation, by dropping all database tables and delete files -->
  <target name="drupal-reset">
    <if>
      <available file="${site.settings.dir}"
                 property="site.settings.dir.exists"/>
      <then>
        <chmod file="${site.settings.dir}" mode="0755"/>
        <delete failonerror="true" includeemptydirs="true">
          <fileset dir="${site.settings.dir}">
            <include name="files/**"/>
            <exclude name="files/.htaccess"/>
            <exclude name="files/translation"/>
          </fileset>
        </delete>
      </then>
    </if>
    <if>
      <available file="${site.private_files.dir}"
                 property="site.private_files.dir.exists"/>
      <then>
        <chmod file="${site.private_files.dir}" mode="0755"/>
        <delete failonerror="true" includeemptydirs="true">
          <fileset dir="${site.private_files.dir}">
            <include name="**"/>
            <exclude name=".gitkeep"/>
            <exclude name=".htaccess"/>
          </fileset>
        </delete>
      </then>
    </if>
    <phingcall target="mysql-drop-tables"/>
  </target>
  <!-- Prepares the code_base for installation via the UI. -->
  <target name="drupal-init"
          depends="drupal-settings-php-writable,drupal-services-yml-writable ">
    <if>
      <not>
        <isset property="www.user"/>
      </not>
      <then>
        <exec command="whoami" outputProperty="www.user"/>
      </then>
    </if>
    <mkdir dir="${site.settings.dir}/files" mode="0775"/>
    <if>
      <and>
        <isset property="www.user"/>
        <isset property="www.group"/>
      </and>
      <then>
        <chown file="${site.settings.dir}/files" user="${www.user}"
               group="${www.group}"/>
      </then>
    </if>
  </target>
  <!-- Install with drush site install TODO-->
  <target name="drupal-install"
          depends="env,drupal-settings-folder-writable, drupal-settings-php-writable">
    <drush
      command="si"
      assume="yes"
      root="${docroot}"
      bin="${drush.bin}"
      verbose="${drush.verbose}">
      <option name="db-url" value="${drupal.db.url}"/>
      <option name="locale" value="${site.locale}"/>
      <option name="site-name" value="${site.name}"/>
      <option name="account-name" value="${drupal.admin.username}"/>
      <option name="account-pass" value="${drupal.admin.password}"/>
      <option name="account-mail" value="${drupal.admin.email}"/>
      <option name="site-mail" value="${site.mail}"/>
      <param>${site.profile.name}</param>
      <param>varbase_multilingual_configuration.enable_multilingual=true</param>
      <param>varbase_extra_components.vmi=true</param>
      <param>varbase_extra_components.varbase_heroslider_media=true</param>
      <param>varbase_extra_components.varbase_carousels=true</param>
      <param>varbase_extra_components.varbase_blog=true</param>
      <param>varbase_extra_components.varbase_auth=false</param>
      <param>varbase_development_tools.varbase_development=true</param>
      <param>install_configure_form.enable_update_status_module=NULL</param>
      <param>install_configure_form.enable_update_status_emails='NULL'</param>
    </drush>
    <drush
      command="en"
      assume="yes"
      root="${docroot}"
      bin="${drush.bin}"
      verbose="${drush.verbose}">
      <param>varbase_styleguide</param>
      <param>vbp_text_and_image</param>
      <param>varbase_media_instagram</param>
      <param>varbase_media_twitter</param>
    </drush>
    <drush
      command="config:set"
      assume="yes"
      root="${docroot}"
      bin="${drush.bin}"
      verbose="${drush.verbose}">
      <param>system.logging</param>
      <param>error_level all</param>
    </drush>

    <!-- Set the auto-increment default values for some tables. -->
    <setmysqlautoincrement/>

    <!-- Set the transaction type to READ-COMMITTED. -->
    <phingcall target="set-mysql-transaction-type"/>

    <!-- Make sure persistent session cookies are disabled. -->
    <phingcall target="disable-persistent-session-cookies"/>
  </target>
  <!-- Execute Drupal updates. -->
  <target name="drupal-updates-run">
    <drush
      command="cache:clear"
      assume="yes"
      root="${docroot}"
      bin="${drush.bin}"
      verbose="${drush.verbose}">
      <param>bin</param>
      <param>config</param>
    </drush>
    <drush
      command="updatedb"
      assume="yes"
      root="${docroot}"
      bin="${drush.bin}"
      verbose="${drush.verbose}">
    </drush>
    <drush
      command="cache:rebuild"
      assume="yes"
      root="${docroot}"
      bin="${drush.bin}"
      verbose="${drush.verbose}">
    </drush>
  </target>
  <!-- Restores database.sql from default dumps folder -->
  <target name="drupal-database-restore" depends="mysql-drop-tables">
    <drush
      command="sql:query"
      assume="yes"
      root="${docroot}"
      bin="${drush.bin}"
      verbose="${drush.verbose}">
      <option name="file" value="${site.dumps.dir}/database.sql"/>
    </drush>
    <phingcall target="drupal-cache-tables-truncate"/>
    <phingcall target="drupal-updates-run"/>
  </target>
  <!-- Creates a database.sql in default dumps folder -->
  <target name="drupal-database-dump">
    <drush
      command="sql:dump"
      assume="yes"
      root="${docroot}"
      bin="${drush.bin}"
      verbose="${drush.verbose}">
      <option name="result-file" value="${site.dumps.dir}/database.sql"/>
    </drush>
  </target>
  <!-- Export complete site configuration. -->
  <target name="drupal-config-export">
    <!-- Make sure the config directory exists. -->
    <mkdir dir="${site.config.dir}"/>
    <drush
      command="config-export"
      assume="yes"
      root="${docroot}"
      bin="${drush.bin}"
      verbose="${drush.verbose}">
      <option name="destination" value="${site.config.dir}"/>
    </drush>
  </target>
  <!-- Import complete site configuration. -->
  <target name="drupal-config-import">
    <!-- Make sure the config directory exists. -->
    <if>
      <available dir="${site.config.dir}" type="dir"
                 property="site.config.dir.available"/>
      <then>
        <drush
          command="config:import"
          assume="yes"
          root="${docroot}"
          bin="${drush.bin}"
          verbose="${drush.verbose}">
          <option name="source" value="${site.config.dir}"/>
        </drush>
      </then>
    </if>
  </target>

  <!-- #### BEHAT ### -->
  <!-- Set up Behat. -->
  <!-- Set up Behat for testing installation process. -->
  <target name="behat-init" description="Generate the configuration file for Behat testing the installation process..">
    <if>
      <available file="${behat.common.yml.path}" type="file"
                 property="behat.common.yml.available"/>
      <then>
        <echo message="Deleting existing behat.common.yml configuration file"/>
        <delete file="${behat.common.yml.path}" failonerror="false"/>
      </then>
    </if>
    <echo
      message="Creating behat.common.yml configuration files"/>
    <loadfile property="behat.common.yml.content"
              file="${behat.common.yml.template}"/>
    <echo message="${behat.common.yml.content}" file="${behat.common.yml.path}"/>
    <!-- Create the directory and file for browsertest output. -->
    <echo message="Creating output directories"/>
    <mkdir dir="${behat.output.dir}"/>
    <mkdir dir="${behat.output.dir}/installation"/>
    <mkdir dir="${behat.output.dir}/installation/assets"/>
    <mkdir dir="${behat.output.dir}/installation/assets/Twig"/>
    <mkdir dir="${behat.output.dir}/installation/assets/Twig/css"/>
    <mkdir dir="${behat.output.dir}/installation/screenshots/"/>
    <mkdir dir="${behat.output.dir}/init"/>
    <mkdir dir="${behat.output.dir}/init/assets"/>
    <mkdir dir="${behat.output.dir}/init/assets/Twig"/>
    <mkdir dir="${behat.output.dir}/init/assets/Twig/css"/>
    <mkdir dir="${behat.output.dir}/init/screenshots/"/>
    <mkdir dir="${behat.output.dir}/default"/>
    <mkdir dir="${behat.output.dir}/default/assets"/>
    <mkdir dir="${behat.output.dir}/default/assets/Twig"/>
    <mkdir dir="${behat.output.dir}/default/assets/Twig/css"/>
    <mkdir dir="${behat.output.dir}/default/screenshots/"/>
  </target>

  <!-- Run Behat tests. -->
  <target name="behat-tests-run" description="Run Behat tests.">
    <behat
      executable="${behat.bin}"
      config="${behat.yml.path}"
      strict="${behat.options.strict}"
      verbose="${behat.options.verbosity}"
    />
  </target>

  <!--- TODO -->
  <!-- Cleanup Redis settings. -->
  <target
    name="clean-redis-settings"
    description="Remove redis settings from the settings file. Ideal to facilitate re-installs.">
    <replaceregexp file="${site.settings.php}"
                   pattern="(.*)// REDIS SETTING${line.separator}" replace=""/>
  </target>
  <!-- Setup Redis -->
  <target
    name="setup-redis"
    depends="clean-redis-settings"
    description="Sets up redis when available.">
    <if>
      <isset property="redis.host"/>
      <then>
        <phingcall target="enable-module">
          <property name="module" value="redis"/>
        </phingcall>
        <phingcall target="drupal-settings-folder-writable"/>
        <phingcall target="drupal-settings-php-writable"/>
        <append destFile="${site.settings.php}"
                text="$settings['redis.connection']['interface'] = 'Predis'; // REDIS SETTING${line.separator}"/>
        <append destFile="${site.settings.php}"
                text="$settings['redis.connection']['host']      = '${redis.host}'; // REDIS SETTING${line.separator}"/>
        <append destFile="${site.settings.php}"
                text="$settings['cache']['default'] = 'cache.backend.redis'; // REDIS SETTING${line.separator}"/>
        <append destFile="${site.settings.php}"
                text="$settings['container_yamls'][] = DRUPAL_ROOT . '/modules/contrib/redis/example.services.yml'; // REDIS SETTING${line.separator}"/>
        <phingcall target="clear-cache"/>
      </then>
      <else>
        <echo
          message="Skipping setup of Redis. The 'redis.host' property is not defined."/>
      </else>
    </if>
  </target>


  <!-- Setup a prod installation -->
  <target
    name="dist"
    description="Build a prod environment."
    depends="install-composer-dependencies, drupal-install"/>
  <!-- Setup a dev installation -->
  <target
    name="build"
    description="Build a dev environment."
    depends="install-composer-dependencies-dev,setup-phpunit"/>

  <!-- Set up PHPUnit. -->
  <target name="setup-phpunit"
          description="Generate the configuration file for PHPUnit.">
    <if>
      <available file="${phpunit.config}" type="file"
                 property="phpunit.config.available"/>
      <then>
        <echo message="Deleting existing PHPUnit configuration file."/>
        <delete file="${phpunit.config}" failonerror="false"/>
      </then>
    </if>
    <phpunitconfiguration
      configFile="${phpunit.config}"
      distFile="${phpunit.dist}"
      files="${phpunit.files}"
      directories="${phpunit.directories}"
      testsuiteName="${phpunit.testsuite.name}"
      baseUrl="${phpunit.base_url}"
      dbUrl="${phpunit.db_url}"
      sparqlUrl="${phpunit.sparql_url}"
      browsertestOutputDirectory="${phpunit.browsertest_output_dir}"
      browsertestOutputFile="${phpunit.browsertest_output_file}"/>

    <!-- Create the directory and file for browsertest output. -->
    <mkdir dir="${phpunit.browsertest_output_dir}"/>
    <touch file="${phpunit.browsertest_output_file}"/>
  </target>
  <!-- Drush cr. -->
  <target name="clear-cache">
    <drush
      command="cr"
      assume="yes"
      root="${website.drupal.dir}"
      bin="${drush.bin}"
      verbose="${drush.verbose}">
    </drush>
  </target>
  <!-- Export complete site configuration. -->
  <target name="export-config">
    <!-- Make sure the config directory exists. -->
    <mkdir dir="${site.config.dir}"/>
    <drush
      command="config-export"
      assume="yes"
      root="${docroot}"
      bin="${drush.bin}"
      verbose="${drush.verbose}">
      <option name="destination" value="${site.config.dir}"/>
    </drush>
  </target>
  <!-- Set the transaction type to READ-COMMITTED. -->
  <target name="set-mysql-transaction-type"
          description="Sets the MySQL transaction to READ-COMMITTED"
          depends="drupal-settings-folder-writable, drupal-settings-php-writable">

    <!-- Avoid duplicates in settings.php, if the file already exists. -->
    <reflexive>
      <fileset dir="${site.settings.dir}">
        <include pattern="settings.php"/>
      </fileset>
      <filterchain>
        <replaceregexp>
          <regexp
            pattern="^\$databases\['default'\]\['default'\]\['init_commands'\].*$\n"
            replace=""
            modifiers="m"/>
        </replaceregexp>
      </filterchain>
    </reflexive>

    <append destFile="${site.settings.php}"
            text="$databases['default']['default']['init_commands'] = ['isolation' => &quot;SET SESSION tx_isolation='READ-COMMITTED'&quot;];${line.separator}"/>
  </target>
  <!-- Disable persistent session cookies, this is necessary for the "Remember
  me" option at user log in. -->
  <target name="disable-persistent-session-cookies"
          description="Disable persistent session cookies"
          depends="drupal-settings-folder-writable, drupal-services-yml-writable">
    <reflexive>
      <fileset dir="${site.settings.dir}">
        <include pattern="services.yml"/>
      </fileset>
      <filterchain>
        <replaceregexp>
          <regexp
            pattern="(cookie_lifetime: )\d+(0$)"
            replace="\1\2"
            modifiers="m"/>
        </replaceregexp>
      </filterchain>
    </reflexive>
  </target>
  <!-- Install Composer dependencies for the build system. -->
  <target name="install-composer-dependencies-dev">
    <composer command="install" composer="${composer.bin}">
      <arg value="--working-dir=${project.basedir}"/>
    </composer>
  </target>
  <!-- Install Composer dependencies for a production environment. -->
  <target name="install-composer-dependencies">
    <composer command="install" composer="${composer.bin}">
      <arg value="--working-dir=${project.basedir}"/>
      <arg value="--no-dev"/>
    </composer>
  </target>

</project>

